---
description: AIFrame Meta Development Rules
Guidelines for AI development and code maintenance.

patterns: ["**/*"]

rules:
  # Core Development Principles
  - Follow intent-based architecture
  - Maintain type safety
  - Write self-documenting code
  - Handle errors gracefully
  - Test thoroughly

  # Testing Protocol
  - Run tests after EVERY code change
  - Analyze test failures systematically:
    * Identify the specific test case
    * Review expected vs actual behavior
    * Check related test cases for patterns
  - Include test coverage in decision making
  - Always provide test run button/link after changes
  - Verify edge cases and boundary conditions

  # Code Review Depth
  - Examine surrounding context (minimum 10 lines)
  - Check for patterns across similar files
  - Consider edge cases explicitly
  - Review error handling paths
  - Verify type safety and null checks
  - Look for potential race conditions
  - Validate transaction boundaries

  # Error Handling Guidelines
  - Log meaningful error messages
  - Include context in error reporting
  - Consider recovery paths
  - Maintain transaction integrity
  - Preserve system state during failures
  - Use appropriate error types
  - Implement proper cleanup

  # Documentation Standards
  - Document WHY, not just WHAT
  - Explain complex algorithms
  - Note assumptions and prerequisites
  - Update relevant documentation
  - Include examples for non-obvious usage
  - Keep README current
  - Document breaking changes

  # Performance Awareness
  - Consider operation complexity
  - Note resource-intensive operations
  - Suggest optimizations when relevant
  - Monitor transaction boundaries
  - Be aware of memory usage
  - Profile critical paths
  - Consider scalability implications

Getting Started:
  1. Review existing documentation
  2. Run test suite before changes
  3. Make incremental improvements
  4. Validate changes with tests
  5. Update documentation as needed

Best Practices:
  - Use TypeScript strict mode
  - Follow SOLID principles
  - Write idiomatic code
  - Keep functions focused
  - Maintain separation of concerns

@file src/server.ts
@file README.md
---

Process Guidelines:
  - Document all framework enhancement ideas
  - Keep track of development patterns
  - Share insights about AI-human collaboration
  - Update documentation proactively
  - Think about developer experience
  - Consider both AI and human readability

AI Agent Workflow:
  - Read all framework rules at start
  - Acknowledge rules to engineers
  - Reference specific rules in decisions
  - Explain rule-based reasoning
  - Document rule applications
  - Suggest rule improvements
  - Keep track of rule effectiveness

Rule Management:
  - Identify gaps in current rules
  - Suggest new patterns and practices
  - Add concrete examples
  - Update file references
  - Remove outdated guidelines
  - Clarify ambiguous rules
  - Add context where needed

AI Collaboration Guidelines:
  - Explain reasoning behind suggestions
  - Reference relevant code patterns
  - Share alternative approaches
  - Document edge cases found
  - Suggest test scenarios
  - Improve error messages
  - Enhance type definitions
  - Cite relevant rules in decisions
  - Explain rule applications to engineers

Framework Evolution:
  - Track feature requests
  - Document breaking changes
  - Plan deprecations carefully
  - Consider backward compatibility
  - Maintain upgrade guides
  - Version rules appropriately

Development Workflow:
  - Use semantic commits
  - Write detailed PR descriptions
  - Update tests with changes
  - Document breaking changes
  - Keep rules in sync with code
  - Review documentation updates
  - Create feature branches for all changes
  - Follow branch naming convention:
    ```
    feature/description-of-feature
    fix/issue-description
    docs/documentation-update
    refactor/refactoring-description
    test/test-addition-description
    chore/maintenance-task
    ```
  - Branch from main for features
  - Keep branches short-lived
  - Delete branches after merge

Pull Request Guidelines:
  - Create PR for every feature branch
  - Use PR template if available
  - Link related issues
  - Include test coverage
  - Keep changes focused
  - Request relevant reviewers
  - Address review comments
  - Squash commits before merge
  - Delete branch after merge

Branch Lifecycle:
  - Create branch from main
  - Commit changes following guidelines
  - Keep branch up to date with main
  - Create PR when ready
  - Address review feedback
  - Merge when approved
  - Delete branch after merge

Commit Guidelines:
  - Commit after each logical change
  - Use semantic commit messages:
    ```
    feat: Add new feature
    fix: Fix specific issue
    docs: Update documentation
    test: Add or modify tests
    refactor: Code improvements
    chore: Dependency updates
    ```
  - Include context in commit messages
  - Reference related issues/PRs
  - Group related changes
  - Keep commits focused
  - Run tests before committing

Testing Guidelines:
  - Keep test configuration in one place (package.json)
  - Avoid generating test config files in CI
  - Clean up test resources properly
  - Handle database connections carefully
  - Use environment variables for test configuration
  - Document test environment requirements
  - Consider CI/CD implications when writing tests

CI/CD Best Practices:
  - Keep CI workflows simple and focused
  - Remove unnecessary steps (e.g., unused artifacts)
  - Use explicit configuration options
  - Clean up generated files before tests
  - Document environment variables
  - Handle test cleanup properly
  - Consider matrix testing implications

Database Testing:
  - Initialize test databases properly
  - Clean up after each test
  - Handle connection pools carefully
  - Use transactions where appropriate
  - Document database requirements
  - Consider CI environment differences
  - Handle cleanup edge cases

@file README.md
@file .cursor/rules/*.mdc 